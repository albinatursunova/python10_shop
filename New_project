1. Создать папку для проекта
2. Создать файл requirements.txt
    Django==3.1
    psycopg2-binary==2.8.6 - библиотека отвечает для работы с БД
    Pillow==7.1 - для обработки картинки
3. Создать виртуальное окружение
python3 -m venv env
4. Активировать
source env/bin/activate
5. При помощи pip устанавливаем доп модули
pip install -r requirements.txt
6. Создаём django проект
django-admin startproject shop .
7. Создать базу данных в psql
CREATE DATABASE
Сделать настройки проекта
8. Определить структуру проекта
9. Создём приложения (application)
(
python manage.py startapp account
python manage.py startapp product
python manage.py startapp order

settings +
INSTALLED_APPS +

    'account',
    'order',
    'product',

)
python mange.py startapp имя_приложения
10. Определить сущности (модели) и создать под них классы
11. Создать базу данных в psql
Сделать настройки проекта
12. Определить модель пользователя (стандартная или кастомная)
13. Сделать миграции (ORM) (для работы моделей)
python manage.py makemigrations
python manage.py migrate
14. Регистрируем таблицы в админской части
в папке где есть модель, заходим в admin.py
from django.contrib import admin
from .models import Category, Product
admin.site.register(Category)
admin.site.register(Product)

15. заходим в views и там создаем функции с классами из models.py




# .all() - выдаёт записи из БД
# Product.objects.all()
# SELECT * FROM product;
#
# .filter(условие) - выдаёт результаты, отвечающие условиям
# Product.objects.filter(price__gt=100)
# SELECT * FROM product WHERE;

# .exclude(условия) - исключает результаты, отвечающие условию
# SELECT * FROM product WHERE NOT price > 100;
#
# .get(условия) - получает один конкретный объект
# Product.objects.get(id=2);
#
# Если по запросу не найдено ни одной записи
# DoesNotExist

# Если найдено более одной записи
# MultipleObjectsReturned
#
# .create() - метод для создания объектов модели
# Category.objects.create(name='Акссесуары', slug='accessories')
# INSERT INTO product VALUES ('Аксессуары', 'accessories');
#
# cat1 = Category(name='Аксессуары', slug='accessories')
# cat1.save()
# .update() - обновление объектов
# Product.objects.update() - для всех записей
# Product.objects.filter(...)update(...) - только для определённых записей

# Product.objects.filter(category_id='notebooks').update(price=F('price') - 1000)
# UPDATE product SET price = price - 10000 WHERE category_id = 'notebooks'

# .defer()
# .only()

# title, description, price, category_id
# Product.objects.all()
# SELECT title, description, price, category_id FROM product;
#
# title, price
# Product.objects.only('price', 'title')
# Product.objects.defer('description', 'category_id')
# SELECT title, price FROM product;

# .order_by()
# Product.objects.order_by('price')
# SELECT * FROM product ORDER BY price ASC;

# Product.objects.order_by('-price')
# SELECT * FROM product ORDER BY price DESC;

# .all()
# Product.objects.all()
# <QuerySet[obj1, obj2, obj3, ...]>

# .values() - выдаёт поля записей ввиде словаря
# Product.objects.values()
# <QuerySet[{'id': 1, 'title': 'Apple iPhone', 'description' ...},
#           {'id': 2, 'title': 'Redmi Note 8', ...}]>
#
# Product.objects.values('title', 'price')
# <QuerySet[{'title': 'Tomato', 'price': 654.00}
#           {'title': 'Banana', 'price': 451.00}]>
#
# .values_list()
# Product.objects.values_list()
# <QuerySet[('Apple iPhone 12', 'Lorem Ipsum', 200.00, ...)
#           ('Redmi Note 9', 'Dolor Sit amet', 250.00, ...)]>

# Product.objects.values_list('title', 'price')
# <QuerySet[('Apple iPhone 12', 'Lorem Ipsum', 200.00)
#           ('Redmi Note 9', 'Dolor Sit amet', 250.00)]>

# Product.objects.values_list('title')
# <QuerySet[('Apple iPhone 12',), ('Redmi Note 9',), ('Xiaomi Mi 10',)]

# Product.objects.values_list('title', flat=True)
# <QuerySet['Apple iPhone 12', 'Redmi Note 9', 'Xiaomi Mi 10']>

# .count() - возвращает количество результатов запроса

# Product.objects.all().count()
# Product.objects.count()
# SELECT COUNT (*) FROM product;
#
# Product.objects.filter(...).count()
# SELECT COUNT (*) FROM product WHERE ...;

# .first() - возвращает первый объект из результатов запроса
# .last() - возвращает последний объект

# Если нет ни одной записи в результатах, то возвращается None

# .exists() - проверяет, есть ли в результатах запроса хотя бы одна запись

# __gt -> ">"
# __lt -> "<"
# __gte -> ">="
# __lte -> "<="

# Product.objects.filter(price__gte=20000)

# SELECT * FROM   product WHERE price >= 20000;

# Product.objects.filter(price = 20000)
# SELECT * FROM product WHERE pr
ice = 20000;

# __range -> BETWEEN
#
# Product.objects.filter(price__gte=20000, price__lte=50000)
# SELECT * FROM product WHERE price >= 20000 AND price <= 50000;
#
# Product.objects.filter(price__range(20000, 50000))
# SELECT * FROM product WHERE price BETWEEN 20000 AND 50000;

#  все операции на числа применяется и к датам

# exact
# iexact -> "="

# Product.object.filter(title__exact='Apple')
# SELECT * FROM product WHERE title = 'Apple';
#
# Product.object.filter(title__iexact='Apple')
# SELECT * FROM product WHERE title ILIKE 'Apple';

# stertwith
# istartwith

# Product.object.filter(title__startwith='Apple')
# SELECT * FROM product WHERE title LIKE 'Apple%';

# Product.object.filter(title__istartwith='Apple')
# SELECT * FROM product WHERE title ILIKE 'Apple%';

# endswith
# iendswith

# Product.object.filter(title__endstwith='Apple')
# SELECT * FROM product WHERE title LIKE '%Apple';
#
# Product.object.filter(title__iendstwith='Apple')
# SELECT * FROM product WHERE title ILIKE '%Apple';

# contains
# icontains

# Product.object.filter(title__contains='Apple')
# SELECT * FROM product WHERE title LIKE '%Apple%';
#
# Product.object.filter(title__icontains='Apple')
# SELECT * FROM product WHERE title LIKE '%Apple%';

# in - проверка на вхождение в список
#
# Product.object.filter(category_id__in=['notebooks', 'cellphones'])
# SELECT * FROM product WHERE categoty_id IN ('notebooks', 'cellphones');

# isnull
# Product.object.filter(image__isnull=True)
# SELECT * FROM product WHERE image IS NULL;
#
# Product.object.filter(image_isnull=False)
# SELECT * FROM product WHERE image IS NOT NULL;